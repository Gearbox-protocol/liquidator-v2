/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ILiquidator, ILiquidatorInterface } from "./ILiquidator";

const _abi = [
  {
    type: "function",
    name: "partialLiquidateAndConvert",
    inputs: [
      {
        name: "creditManager",
        type: "address",
        internalType: "address",
      },
      {
        name: "creditAccount",
        type: "address",
        internalType: "address",
      },
      {
        name: "assetOut",
        type: "address",
        internalType: "address",
      },
      {
        name: "amountOut",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "priceUpdates",
        type: "tuple[]",
        internalType: "struct IPartialLiquidationBotV3.PriceUpdate[]",
        components: [
          {
            name: "token",
            type: "address",
            internalType: "address",
          },
          {
            name: "reserve",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
      {
        name: "conversionCalls",
        type: "tuple[]",
        internalType: "struct MultiCall[]",
        components: [
          {
            name: "target",
            type: "address",
            internalType: "address",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "previewPartialLiquidation",
    inputs: [
      {
        name: "creditManager",
        type: "address",
        internalType: "address",
      },
      {
        name: "creditAccount",
        type: "address",
        internalType: "address",
      },
      {
        name: "assetOut",
        type: "address",
        internalType: "address",
      },
      {
        name: "amountOut",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "priceUpdates",
        type: "tuple[]",
        internalType: "struct IPartialLiquidationBotV3.PriceUpdate[]",
        components: [
          {
            name: "token",
            type: "address",
            internalType: "address",
          },
          {
            name: "reserve",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
      {
        name: "connectors",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "slippage",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "res",
        type: "tuple",
        internalType: "struct LiquidationResult",
        components: [
          {
            name: "calls",
            type: "tuple[]",
            internalType: "struct MultiCall[]",
            components: [
              {
                name: "target",
                type: "address",
                internalType: "address",
              },
              {
                name: "callData",
                type: "bytes",
                internalType: "bytes",
              },
            ],
          },
          {
            name: "profit",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "amountIn",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "amountOut",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
] as const;

export class ILiquidator__factory {
  static readonly abi = _abi;
  static createInterface(): ILiquidatorInterface {
    return new utils.Interface(_abi) as ILiquidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): ILiquidator {
    return new Contract(address, _abi, signerOrProvider) as ILiquidator;
  }
}
