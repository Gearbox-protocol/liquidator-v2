/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type MultiCallStruct = {
  target: PromiseOrValue<string>;
  callData: PromiseOrValue<BytesLike>;
};

export type MultiCallStructOutput = [string, string] & {
  target: string;
  callData: string;
};

export type LiquidationResultStruct = {
  calls: MultiCallStruct[];
  profit: PromiseOrValue<BigNumberish>;
  amountIn: PromiseOrValue<BigNumberish>;
  amountOut: PromiseOrValue<BigNumberish>;
};

export type LiquidationResultStructOutput = [
  MultiCallStructOutput[],
  BigNumber,
  BigNumber,
  BigNumber,
] & {
  calls: MultiCallStructOutput[];
  profit: BigNumber;
  amountIn: BigNumber;
  amountOut: BigNumber;
};

export declare namespace IPartialLiquidationBotV3 {
  export type PriceUpdateStruct = {
    token: PromiseOrValue<string>;
    reserve: PromiseOrValue<boolean>;
    data: PromiseOrValue<BytesLike>;
  };

  export type PriceUpdateStructOutput = [string, boolean, string] & {
    token: string;
    reserve: boolean;
    data: string;
  };
}

export interface ILiquidatorInterface extends utils.Interface {
  functions: {
    "partialLiquidateAndConvert(address,address,address,uint256,(address,bool,bytes)[],(address,bytes)[])": FunctionFragment;
    "previewPartialLiquidation(address,address,address,uint256,(address,bool,bytes)[],address[],uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "partialLiquidateAndConvert"
      | "previewPartialLiquidation",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "partialLiquidateAndConvert",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IPartialLiquidationBotV3.PriceUpdateStruct[],
      MultiCallStruct[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "previewPartialLiquidation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IPartialLiquidationBotV3.PriceUpdateStruct[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
    ],
  ): string;

  decodeFunctionResult(
    functionFragment: "partialLiquidateAndConvert",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewPartialLiquidation",
    data: BytesLike,
  ): Result;

  events: {};
}

export interface ILiquidator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILiquidatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    partialLiquidateAndConvert(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      assetOut: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      conversionCalls: MultiCallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    previewPartialLiquidation(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      assetOut: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      connectors: PromiseOrValue<string>[],
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  partialLiquidateAndConvert(
    creditManager: PromiseOrValue<string>,
    creditAccount: PromiseOrValue<string>,
    assetOut: PromiseOrValue<string>,
    amountOut: PromiseOrValue<BigNumberish>,
    priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
    conversionCalls: MultiCallStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  previewPartialLiquidation(
    creditManager: PromiseOrValue<string>,
    creditAccount: PromiseOrValue<string>,
    assetOut: PromiseOrValue<string>,
    amountOut: PromiseOrValue<BigNumberish>,
    priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
    connectors: PromiseOrValue<string>[],
    slippage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    partialLiquidateAndConvert(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      assetOut: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      conversionCalls: MultiCallStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    previewPartialLiquidation(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      assetOut: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      connectors: PromiseOrValue<string>[],
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<LiquidationResultStructOutput>;
  };

  filters: {};

  estimateGas: {
    partialLiquidateAndConvert(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      assetOut: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      conversionCalls: MultiCallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    previewPartialLiquidation(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      assetOut: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      connectors: PromiseOrValue<string>[],
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    partialLiquidateAndConvert(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      assetOut: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      conversionCalls: MultiCallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    previewPartialLiquidation(
      creditManager: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      assetOut: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      priceUpdates: IPartialLiquidationBotV3.PriceUpdateStruct[],
      connectors: PromiseOrValue<string>[],
      slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
