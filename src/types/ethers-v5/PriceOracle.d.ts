/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PriceOracleInterface extends ethers.utils.Interface {
  functions: {
    "addPriceFeed(address,address)": FunctionFragment;
    "convert(uint256,address,address)": FunctionFragment;
    "decimalsDividers(address)": FunctionFragment;
    "decimalsMultipliers(address)": FunctionFragment;
    "getLastPrice(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "priceFeeds(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wethAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPriceFeed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "decimalsDividers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "decimalsMultipliers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "priceFeeds", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decimalsDividers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decimalsMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class PriceOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PriceOracleInterface;

  functions: {
    addPriceFeed(
      token: string,
      priceFeed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPriceFeed(address,address)"(
      token: string,
      priceFeed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    convert(
      amount: BigNumberish,
      tokenFrom: string,
      tokenTo: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "convert(uint256,address,address)"(
      amount: BigNumberish,
      tokenFrom: string,
      tokenTo: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimalsDividers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "decimalsDividers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimalsMultipliers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "decimalsMultipliers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLastPrice(
      tokenFrom: string,
      tokenTo: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getLastPrice(address,address)"(
      tokenFrom: string,
      tokenTo: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    priceFeeds(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "priceFeeds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<[string]>;

    "wethAddress()"(overrides?: CallOverrides): Promise<[string]>;
  };

  addPriceFeed(
    token: string,
    priceFeed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPriceFeed(address,address)"(
    token: string,
    priceFeed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  convert(
    amount: BigNumberish,
    tokenFrom: string,
    tokenTo: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "convert(uint256,address,address)"(
    amount: BigNumberish,
    tokenFrom: string,
    tokenTo: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimalsDividers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "decimalsDividers(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimalsMultipliers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "decimalsMultipliers(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLastPrice(
    tokenFrom: string,
    tokenTo: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLastPrice(address,address)"(
    tokenFrom: string,
    tokenTo: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  priceFeeds(arg0: string, overrides?: CallOverrides): Promise<string>;

  "priceFeeds(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  wethAddress(overrides?: CallOverrides): Promise<string>;

  "wethAddress()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addPriceFeed(
      token: string,
      priceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPriceFeed(address,address)"(
      token: string,
      priceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    convert(
      amount: BigNumberish,
      tokenFrom: string,
      tokenTo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convert(uint256,address,address)"(
      amount: BigNumberish,
      tokenFrom: string,
      tokenTo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimalsDividers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decimalsDividers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimalsMultipliers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decimalsMultipliers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastPrice(
      tokenFrom: string,
      tokenTo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastPrice(address,address)"(
      tokenFrom: string,
      tokenTo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    priceFeeds(arg0: string, overrides?: CallOverrides): Promise<string>;

    "priceFeeds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wethAddress(overrides?: CallOverrides): Promise<string>;

    "wethAddress()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    addPriceFeed(
      token: string,
      priceFeed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPriceFeed(address,address)"(
      token: string,
      priceFeed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    convert(
      amount: BigNumberish,
      tokenFrom: string,
      tokenTo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convert(uint256,address,address)"(
      amount: BigNumberish,
      tokenFrom: string,
      tokenTo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimalsDividers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decimalsDividers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimalsMultipliers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decimalsMultipliers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastPrice(
      tokenFrom: string,
      tokenTo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastPrice(address,address)"(
      tokenFrom: string,
      tokenTo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "priceFeeds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    wethAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "wethAddress()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addPriceFeed(
      token: string,
      priceFeed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPriceFeed(address,address)"(
      token: string,
      priceFeed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    convert(
      amount: BigNumberish,
      tokenFrom: string,
      tokenTo: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "convert(uint256,address,address)"(
      amount: BigNumberish,
      tokenFrom: string,
      tokenTo: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimalsDividers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decimalsDividers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimalsMultipliers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decimalsMultipliers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastPrice(
      tokenFrom: string,
      tokenTo: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastPrice(address,address)"(
      tokenFrom: string,
      tokenTo: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceFeeds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wethAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
