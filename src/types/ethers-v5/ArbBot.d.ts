/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ArbBotInterface extends ethers.utils.Interface {
  functions: {
    "allowRouter(address)": FunctionFragment;
    "calcDr(uint256,uint256,uint256)": FunctionFragment;
    "checkUniV2(address,address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePrice(address,address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "allowRouter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calcDr",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUniV2",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calcDr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkUniV2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class ArbBot extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ArbBotInterface;

  functions: {
    allowRouter(
      router: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allowRouter(address)"(
      router: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    calcDr(
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      reserve1CL: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcDr(uint256,uint256,uint256)"(
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      reserve1CL: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkUniV2(
      _router: string,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "checkUniV2(address,address,address)"(
      _router: string,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    "priceOracle()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePrice(
      _router: string,
      tokenA: string,
      tokenB: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePrice(address,address,address)"(
      _router: string,
      tokenA: string,
      tokenB: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  allowRouter(
    router: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allowRouter(address)"(
    router: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  calcDr(
    reserve0: BigNumberish,
    reserve1: BigNumberish,
    reserve1CL: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcDr(uint256,uint256,uint256)"(
    reserve0: BigNumberish,
    reserve1: BigNumberish,
    reserve1CL: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkUniV2(
    _router: string,
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  "checkUniV2(address,address,address)"(
    _router: string,
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  "priceOracle()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePrice(
    _router: string,
    tokenA: string,
    tokenB: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePrice(address,address,address)"(
    _router: string,
    tokenA: string,
    tokenB: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    allowRouter(router: string, overrides?: CallOverrides): Promise<void>;

    "allowRouter(address)"(
      router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    calcDr(
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      reserve1CL: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcDr(uint256,uint256,uint256)"(
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      reserve1CL: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkUniV2(
      _router: string,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "checkUniV2(address,address,address)"(
      _router: string,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    "priceOracle()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePrice(
      _router: string,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePrice(address,address,address)"(
      _router: string,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    allowRouter(router: string, overrides?: Overrides): Promise<BigNumber>;

    "allowRouter(address)"(
      router: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    calcDr(
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      reserve1CL: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcDr(uint256,uint256,uint256)"(
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      reserve1CL: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkUniV2(
      _router: string,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkUniV2(address,address,address)"(
      _router: string,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "priceOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePrice(
      _router: string,
      tokenA: string,
      tokenB: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updatePrice(address,address,address)"(
      _router: string,
      tokenA: string,
      tokenB: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowRouter(
      router: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allowRouter(address)"(
      router: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    calcDr(
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      reserve1CL: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcDr(uint256,uint256,uint256)"(
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      reserve1CL: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkUniV2(
      _router: string,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkUniV2(address,address,address)"(
      _router: string,
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceOracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePrice(
      _router: string,
      tokenA: string,
      tokenB: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePrice(address,address,address)"(
      _router: string,
      tokenA: string,
      tokenB: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
